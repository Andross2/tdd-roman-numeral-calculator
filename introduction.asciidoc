[introduction]
Introduction
------------


My story
~~~~~~~~

"Who are you, why are you writing this book, and why should I read it?", I hear
you ask.

I'm still very early on in my programming career.  They say that in any
discipline, everyone goes from apprentice, to journeyman, and eventually,
perhaps, onto being a master.  I'd say that I'm, at best, a journeyman 
programmer, and a journeyman TDD acolyte.  But I was lucky enough, early on
in my career, to fall in with a bunch of TDD fanatics, and it made such a
big impact on my programming skills that I'm burning to share it with everyone.
You might say I have the enthusiasm of a recent convert.

When I first learned Python (from Mark Pilgrim's excellent Dive Into Python,
HT <<dip>>), I came across the concept of TDD, and thought ``yes - I can
definitely see the sense in that''.  Then came my first big project, and
you can guess what happened - there was a client, there were deadlines,
there was lots to do, and any good intentions about TDD went straight out
of the window.

And, actually, it was fine.  At first.  At first I knew I didn't really need
TDD because it was a small website, and I could easily test whether things
worked by just manually checking it out. Click this link 'here', choose that
drop-down item 'there', and 'this' should happen. Easy. This whole writing
tests thing sounds like it would have taken 'ages', and besides, I fancied
myself, from the full height of my 3 weeks of coding experience, as being 
a pretty good programmer. I could handle it. Easy. 

Well, fairly soon Complexity started to exert her fearful influence, and put
a damper on my hubris.  The project grew. Parts of the system started to depend
on other parts. I did my best to follow good principles like DRY (Don't Repeat
Yourself), but that just led to some pretty dangerous territory like multiple
inheritance.  Soon, I became scared of making changes to my code.  I was 
no longer sure what depended on what, and what might happen if I changed this
code over here, oh gosh, I think that bit over there inherits from it, oh but I
think I can just override the method... There were lots of sections of the site
now, and checking them all manually was starting to get impractical.  Better to
leave well enough alone, forget refactoring, just make do. Soon I had a hideous,
ugly mess of code, and new developments became painful.

Not too long after this, I was lucky enough to fall in with a bunch of XP
(Extreme Programming) fanatics at a company called Resolver Systems (now
PythonAnywhere LLP).  They introduced me to TDD.

Although my previous experience had certainly opened my mind to the possible
benefits of automated testing, I can tell you that I dragged my feet at every
stage.  ``I mean, testing in general might be a good idea, but 'really?'.  All
these tests?  Some of them seem like a total waste of time...  And this TDD
process - too many baby steps! Come on, we can see what the right answer is,
why don't we just skip to the end?''

Believe me when I say that I've second-guessed every aspect, that I've proposed
every shortcut, that I've demanded justifications for every seemingly pointless
aspect of TDD, and I've come out seeing the wisdom of it all.

So, let me tell you 'all' about it!



Aims of this book
~~~~~~~~~~~~~~~~~

There's not much point in a book that just covers material you could find by
googling, so this isn't meant to be a guide to Python syntax, and its primary
objective is not to be a tutorial for web development 'per se'. Instead, my 
main aim is to impart a methodology - a way of doing web development, which I
think makes for better web apps and happier developers.  

With that said, it will constantly reference a real example, by building a web
app from scratch using tools like Django, Selenium, jQuery, websockets, and it
aims to do so without assuming any prior knowledge of any of these, so you 
should come out of the other end of this book with a decent introduction to all
those tools, as well as the methodology of TDD.



Outline
~~~~~~~

I've split this book into three books (it's like a tree. Even if you're not
reading the paper version).

*Book 0* is an introduction to TDD.  It covers the Python `unittest` module,
and an introduction to the ``flow'' of TDD: test-first, minimal incremental
changes, refactoring...  Feel free to skip this if you already know a bit about
TDD and just want to get straight into the web stuff.  But on the other hand,
why not check it out anyways -- if nothing else, I promise you'll learn 
something cool about computations with Roman numerals.

*Book 1* covers the basics of TDD with web apps -- setting up your web 
framework, writing functional tests with 'Selenium', models, views,
templates...

*Book 2* covers intermediate level stuff -- styling, integrating external
components, and something that's rather unescapable in the world of web
programming: JavaScript. 

*Book 3* covers some more funky web development topics, and how TDD applies
to them:  NoSQL databases, async and websockets, caching and continuous 
integration.



